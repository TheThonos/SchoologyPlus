import iziToast, { IziToast, IziToastSettings } from "izitoast";
import browser from "webextension-polyfill";

import { trackEvent } from "../utils/analytics";
import { fetchApiJson } from "../utils/api";
import { createElement, createSvgLogo, getBrowser } from "../utils/dom";
import { Logger } from "../utils/logger";
import Modal from "../utils/modal";
import { BETA_TESTS, Setting, updateSettings } from "../utils/settings";
import Theme from "../utils/theme";
import { SchoologyTheme } from "../utils/theme-model";
import { createToastButton, showToast } from "../utils/toast";
import { versionSpecificFirstLaunch } from "../utils/version";

const targetRowWidth = 6;

const siteNavigationTileHelpers = {
    createSpacerTile: function () {
        return createElement("div", [
            "_3hM4e",
            "_3_a9F",
            "zJU7e",
            "util-width-zero-1OcAd",
            "_2oHes",
            "util-last-child-margin-right-zero-1DVn4",
            "splus-addedtodynamicdropdown",
        ]);
    },
    isSpacerTile: function (element: HTMLElement) {
        return element.childElementCount == 0;
    },
    // tiles must be mutable; caller must not care what happens to it
    // spaceToTotal = desired width
    createTilesRow: function (tiles: HTMLDivElement[], spaceToTotal: number) {
        if (!spaceToTotal) {
            spaceToTotal = targetRowWidth;
        }

        while (tiles.length < spaceToTotal) {
            tiles.push(siteNavigationTileHelpers.createSpacerTile());
        }

        // the two obfuscated classes are the ones Schoology has on its rows
        return createElement("div", ["_1tpub", "Kluyr", "splus-addedtodynamicdropdown"], {}, tiles);
    },

    // selector: (actual content container) (thing which just holds the inner body) (row of tiles)
    rowSelector: 'div[role="menu"] ._3mp5E._24W2g._26UWf ._1tpub.Kluyr',
};

export async function load() {
    await preload();

    alertAutoGeneratedTheme();
    handleBetaFeatures();
    updateDefaultDomainSetting();
    pageModifications();
    handleNewVersion();
    loadCourseIcons();
    activateEasterEgg();
    addDarkThemeToggleButton();
    addSplusSettingsButton();
    setupModalCloseEvents();

    courseDropdownModifications();
    groupsDropdownModifications();
    moreMenuModifications();
    reorderUIElements();
}

async function preload() {
    Logger.log(
        `Loaded Schoology Plus version ${browser.runtime.getManifest().version}${
            getBrowser() != "Chrome" || (browser.runtime.getManifest() as any).update_url
                ? ""
                : " (development version)"
        }`
    );
    document.documentElement.setAttribute("page", location.pathname);

    await updateSettings();

    new Setting(
        "defaultDomain",
        "Default Schoology Domain",
        "The website on which Schoology Plus runs. Cannot be changed here.",
        "app.schoology.com",
        "text",
        {
            disabled: true,
        },
        value => value,
        undefined,
        element => element.value
    );

    Logger.debug("Finished loading preload.js");
}

function alertAutoGeneratedTheme() {
    // Inform user about theme
    if (localStorage["splus-temp-generatedtheme"]) {
        localStorage.removeItem("splus-temp-generatedtheme");

        showToast(
            "Theme Generated",
            "Schoology Plus created a theme that matches your school's theme",
            "rgb(0,255,0)",
            {
                buttons: [
                    createToastButton(
                        "View Themes",
                        "view-themes-button",
                        () => (location.href = browser.runtime.getURL("/theme-editor.html"))
                    ),
                ],
            }
        );
    }
}

function handleBetaFeatures() {
    let betaCode = Setting.getValue<string>("beta");
    let betaSection = null;
    if (betaCode && betaCode in BETA_TESTS) {
        // Beta Enabled Notice
        let betaTag = createElement("span", ["splus-beta-tag", "splus-track-clicks"], {
            textContent: "Î²",
            id: "beta-tag",
        });
        betaTag.addEventListener("click", event => Modal.openModal("beta-modal"));
        let betaContainer = createElement("div", ["splus-beta-container"], {}, [betaTag]);
        document.body.append(betaContainer);
        betaSection = createBetaSection(betaCode);
        betaContainer.append(betaSection);
    }

    function createBetaSection(name: string) {
        return createElement("div", ["splus-beta-section"], { id: `splus-beta-section-${name}` }, [
            createElement("h3", [], { textContent: name }),
        ]);
    }

    function createBetaToggleCheckbox(
        name: string,
        onchange: () => void,
        checked = false,
        nestingLevel = 1
    ) {
        return createElement(
            "div",
            ["splus-beta-toggle"],
            { style: { paddingLeft: `${(nestingLevel - 1) * 10}px` } },
            [
                createElement("label", [], { textContent: name }),
                createElement("input", [], {
                    type: "checkbox",
                    checked: checked,
                    onchange: onchange,
                }),
            ]
        );
    }
}

function updateDefaultDomainSetting() {
    // Check Schoology domain
    setTimeout(checkDomain, 2000);

    async function checkDomain() {
        const DISALLOWED_DOMAINS = [
            "asset-cdn.schoology.com",
            "developer.schoology.com",
            "support.schoology.com",
            "info.schoology.com",
            "files-cdn.schoology.com",
            "status.schoology.com",
            "ui.schoology.com",
            "www.schoology.com",
            "api.schoology.com",
            "developers.schoology.com",
            "schoology.com",
            "error-page.schoology.com",
            "app-msft-teams.schoology.com",
            "lti-submission-google.app.schoology.com",
            "lti-submission-microsoft.app.schoology.com",
            "googledrive.app.schoology.com",
            "onedrive.app.schoology.com",
        ];

        let dd = Setting.getValue<string>("defaultDomain");

        if (
            dd !== window.location.hostname &&
            !DISALLOWED_DOMAINS.includes(window.location.hostname) &&
            !window.location.hostname.match(/.*[-\.]app\.schoology\.com/)
        ) {
            await Setting.setValue("defaultDomain", window.location.hostname);

            let bgColor =
                document.querySelector<HTMLElement>("#header header")!.style.backgroundColor;

            if (
                bgColor &&
                !["app.schoology.com", "lms.lausd.net"].includes(window.location.hostname)
            ) {
                let t = {
                    name: `Auto Generated Theme for ${window.location.hostname}`,
                    version: 2,
                    color: {
                        custom: {
                            primary: bgColor,
                            hover: "rgb(2, 79, 125)",
                            background: "rgb(2, 79, 125)",
                            border: "rgb(2, 79, 125)",
                        },
                    },
                    logo: {
                        preset: "default",
                    },
                };

                localStorage["splus-temp-generatedtheme"] = true;

                let s = await browser.storage.sync.get({ themes: [] });
                let themes = (s as { themes: SchoologyTheme[] }).themes.filter(
                    x => x.name !== `Auto Generated Theme for ${window.location.hostname}`
                );
                themes.push(t as SchoologyTheme);
                await browser.storage.sync.set({ themes: themes });
                Logger.log(
                    `Schoology Plus has updated the domain on which it runs.\nPrevious: ${dd}\nNew: ${window.location.hostname}`
                );
                location.reload();
            } else {
                Logger.log(
                    `Schoology Plus has updated the domain on which it runs.\nPrevious: ${dd}\nNew: ${window.location.hostname}`
                );
                location.reload();
            }
        }
    }
}

function pageModifications() {
    // Page Modifications

    document.head.appendChild(
        createElement("meta", [], {
            name: "viewport",
            content: "width=device-width, initial-scale=1",
        })
    );
    let bottom = document.querySelector("span.Footer-copyright-2Vt6I");
    bottom?.appendChild(
        createElement("span", ["footer-divider"], { textContent: "|" }, [
            createElement("span", ["footer-text-enhanced-by"], {
                style: { cursor: "pointer" },
                onclick: () =>
                    window.open(
                        "https://schoologypl.us/?utm_source=ext-enhanced-by-footer",
                        "_blank"
                    ),
                textContent: "Enhanced by Schoology Plus",
            }),
        ])
    );

    document.documentElement.style.setProperty("--default-visibility", "visible");
}

async function handleNewVersion() {
    // Run when new version installed
    let newVersion = Setting.getValue<string>("newVersion");
    if (!newVersion || newVersion != browser.runtime.getManifest().version) {
        let currentVersion = browser.runtime.getManifest().version;

        if (Setting.getValue<string>("defaultDomain") != window.location.hostname) {
            Logger.log(
                "[Updater] Domain isn't set as default, skipping migrations until domain is updated."
            );
            return;
        }

        iziToast.show({
            theme: "dark",
            iconUrl: browser.runtime.getURL("/imgs/plus-icon.png"),
            title: `Welcome to Schoology Plus version ${currentVersion}!`,
            position: "topRight",
            timeout: 0,
            progressBarColor: "hsl(190, 100%, 50%)",
            buttons: [
                [
                    "<button>View Changelog</button>",
                    function (instance: IziToast, toast: HTMLDivElement) {
                        instance.hide(
                            {
                                transitionOut: "fadeOutRight",
                                onClosing: function () {
                                    trackEvent("button_click", {
                                        id: "viewChangelogButton",
                                        context: "Toast",
                                        legacyTarget: "viewChangelogButton",
                                        legacyAction: "click",
                                        legacyLabel: "Toast Button",
                                    });
                                    Modal.openModal("changelog-modal");
                                },
                            },
                            toast,
                            "viewChangelogButton"
                        );
                    },
                    true,
                ],
            ],
        } as IziToastSettings);

        await versionSpecificFirstLaunch(currentVersion, newVersion);
        Setting.setValue("newVersion", chrome.runtime.getManifest().version);
    }
}

async function loadCourseIcons() {
    Theme.profilePictureOverrides = [];
    let courseProfilePicOverrides =
        Setting.getValue<Record<string, string>>("forceDefaultCourseIcons") || {};

    let profilePicLoadTasks = [];

    for (let courseId in courseProfilePicOverrides) {
        if (courseProfilePicOverrides[courseId] == "enabled") {
            profilePicLoadTasks.push(fetchApiJson("/sections/" + courseId));
        }
    }

    Logger.log("Forcing Schoology-default icons for " + profilePicLoadTasks.length + " courses");

    // from https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex/6969486#6969486
    function escapeRegExp(string: string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
    }

    let overrides = await Promise.all(profilePicLoadTasks);
    for (let course of overrides) {
        Theme.profilePictureOverrides.push({
            regex: escapeRegExp(course.course_title) + " ?: " + escapeRegExp(course.section_title),
            url: course.profile_url,
        });
    }

    if (profilePicLoadTasks.length > 0) {
        Theme.setProfilePictures();
    }
}

function activateEasterEgg() {
    let video = document.body.appendChild(
        createElement("video", ["easter-egg"], {
            onended: () => {
                video.style.visibility = "hidden";
            },
        })
    );

    let source = createElement("source", [], {
        src: "https://gist.github.com/aopell/0fe2408cffbab2b6fadb18ebaa28808f/raw/77853f137329c042c34bdb5be38c1930357c0531/cut.webm",
        type: "video/webm",
    });

    let sourceSet = false;

    document.body.addEventListener("keydown", data => {
        if (data.altKey && data.code === "KeyC") {
            if (!sourceSet) {
                video.appendChild(source);
                sourceSet = true;
            }
            video.style.visibility = "visible";
            video.currentTime = 0;
            video.play();

            trackEvent("perform_action", {
                id: "activate",
                context: "Easter Egg",
                value: "confetti",
                legacyTarget: "Easter Egg",
                legacyAction: "play",
                legacyLabel: "Easter Egg",
            });
        } else if (data.altKey && data.code === "KeyB") {
            Modal.openModal("beta-modal");
        } else if (data.key === "Escape") {
            video.style.visibility = "hidden";
            video.pause();
        }
    });
}

function addDarkThemeToggleButton() {
    document.querySelector<HTMLUListElement>("#header > header > nav > ul:nth-child(2)")?.prepend(
        createElement("li", ["_24avl", "_3Rh90", "_349XD"], {}, [
            createElement(
                "button",
                [
                    "_1SIMq",
                    "_2kpZl",
                    "_3OAXJ",
                    "_13cCs",
                    "_3_bfp",
                    "_2M5aC",
                    "_24avl",
                    "_3v0y7",
                    "_2s0LQ",
                    "_3ghFm",
                    "_3LeCL",
                    "_31GLY",
                    "_9GDcm",
                    "_1D8fw",
                    "util-height-six-3PHnk",
                    "util-line-height-six-3lFgd",
                    "util-text-decoration-none-1n0lI",
                    "Header-header-button-active-state-3AvBm",
                    "Header-header-button-1EE8Y",
                    "sExtlink-processed",
                    "splus-track-clicks",
                ],
                {
                    id: "darktheme-toggle-navbar-button",
                    title: "Toggle Theme\n\nUse this button to temporarily disable your Schoology Plus theme if something isn't displaying correctly.",
                    onclick: e => {
                        let newVal =
                            document.documentElement.getAttribute("modern") == "false"
                                ? "true"
                                : "false";
                        if (newVal == "false") {
                            Theme.tempTheme = "Schoology Plus";
                        } else {
                            Theme.tempTheme = undefined;
                        }
                        Theme.apply(Theme.active);
                        document.documentElement.setAttribute("modern", newVal);
                        trackEvent("button_click", {
                            id: "modern-theme-toggle",
                            context: "Navbar",
                            value: newVal,
                            legacyTarget: "modern-theme-toggle",
                            legacyAction: newVal,
                            legacyLabel: "Navbar Button",
                        });
                    },
                    dataset: {
                        popup: (
                            Setting.getNestedValue("popup", "modernThemeToggle", true) &&
                            localStorage.getItem("popup.modernThemeToggle") !== "false"
                        ).toString(),
                    },
                },
                [
                    createElement("div", ["explanation-popup"], {}, [
                        createElement("span", [], {
                            title: "",
                            textContent:
                                "Use this button to temporarily disable your Schoology Plus theme if something isn't displaying correctly.",
                        }),
                        createElement("h3", [], {
                            textContent: "OK",
                            onclick: e => {
                                e.stopPropagation();
                                trackEvent("button_click", {
                                    id: "modern-theme-toggle-explanation-ok",
                                    context: "Explanation Popup",
                                    legacyTarget: "modern-theme-toggle",
                                    legacyAction: "ok",
                                    legacyLabel: "Explanation Popup",
                                });
                                Setting.setNestedValue("popup", "modernThemeToggle", false);
                                localStorage.setItem("popup.modernThemeToggle", "false");
                                document.getElementById(
                                    "darktheme-toggle-navbar-button"
                                )!.dataset.popup = "false";
                            },
                        }),
                    ]),

                    (function () {
                        let paintSvg = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "svg"
                        );
                        paintSvg.setAttribute("viewBox", "-12 -20 500 500");
                        paintSvg.setAttribute("class", "_3ESp2 dlCBz _1I3mg fjQuT uQOmx");

                        paintSvg.innerHTML =
                            '<path d="m242 197v90c0 8.284 6.716 15 15 15h180c8.284 0 15-6.716 15-15v-90c0-8.284-6.716-15-15-15h-180c-8.284 0-15 6.716-15 15z"/><path d="m377 422h-60c-8.284 0-15 6.716-15 15v60c0 8.284 6.716 15 15 15h60c8.284 0 15-6.716 15-15v-60c0-8.284-6.716-15-15-15z"/><path d="m307.667 15c0-8.284-6.716-15-15-15h-45v60h60z"/><path d="m217.667 0h-202.667c-8.284 0-15 6.716-15 15v45h217.667z"/><path d="m307.667 347v-15h-50.667c-24.813 0-45-20.186-45-45v-90c0-24.814 20.187-45 45-45h50.667v-62h-307.667v257c0 8.284 6.716 15 15 15h277.667c8.284 0 15-6.716 15-15zm-155.698-46h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m482 229.58v87.42c0 8.272-6.728 15-15 15h-90c-24.814 0-45 20.186-45 45v15h30v-15c0-8.272 6.728-15 15-15h90c24.814 0 45-20.186 45-45v-45c0-19.555-12.541-36.227-30-42.42z"/>';

                        return paintSvg;
                    })(),
                ]
            ),
        ])
    );
}

function addSplusSettingsButton() {
    document.querySelector("#header > header > nav > ul:nth-child(2)")?.prepend(
        createElement("li", ["_24avl", "_3Rh90", "_349XD"], {}, [
            createElement(
                "button",
                [
                    "_1SIMq",
                    "_2kpZl",
                    "_3OAXJ",
                    "_13cCs",
                    "_3_bfp",
                    "_2M5aC",
                    "_24avl",
                    "_3v0y7",
                    "_2s0LQ",
                    "_3ghFm",
                    "_3LeCL",
                    "_31GLY",
                    "_9GDcm",
                    "_1D8fw",
                    "util-height-six-3PHnk",
                    "util-line-height-six-3lFgd",
                    "util-text-decoration-none-1n0lI",
                    "Header-header-button-active-state-3AvBm",
                    "Header-header-button-1EE8Y",
                    "sExtlink-processed",
                ],
                {
                    id: "splus-settings-navbar-button",
                    title: "Schoology Plus Settings\n\nChange settings relating to Schoology Plus.",
                    onclick: () => {
                        Modal.openModal("settings-modal");
                        trackEvent("button_click", {
                            id: "splus-settings",
                            context: "Navbar",
                            legacyTarget: "splus-settings",
                            legacyAction: "open",
                            legacyLabel: "Navbar Button",
                        });
                    },
                },
                [createSvgLogo("_3ESp2", "dlCBz", "_1I3mg", "fjQuT", "uQOmx")]
            ),
        ])
    );
}

function setupModalCloseEvents() {
    for (let e of document.querySelectorAll(".close")) {
        e.addEventListener("click", Modal.closeAllModals);
    }

    window.addEventListener("click", event => {
        if (Modal.modals.find(x => x.element == event.target)) {
            Modal.closeAllModals();
        }
    });
}

function shouldProcessMutations(mutationList: MutationRecord[]) {
    let processThis = false;

    // ensure we're processing more than an addition of something this very handler added
    for (let mutation of mutationList) {
        for (let addedElem of mutation.addedNodes) {
            if (
                addedElem instanceof HTMLElement &&
                addedElem.classList &&
                !addedElem.classList.contains("splus-addedtodynamicdropdown")
            ) {
                processThis = true;
                break;
            }
        }

        if (processThis) {
            break;
        }
    }

    return processThis;
}

function courseDropdownModifications() {
    let coursesDropdownContainer: HTMLElement | null | undefined = null;

    let coursesDropdownObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        Logger.log("Processing courses dropdown mutation");

        if (Setting.getValue("archivedCoursesButton") === "show") {
            // aims to select the original "My Courses" link in the dropdown
            let candidateLink = coursesDropdownContainer?.querySelector(
                '.CjR09._8a6xl._1tpub > a[href="/courses"]._3ghFm'
            );
            if (candidateLink) {
                // the obfuscated class name is the one Schoology uses to float these links right
                let newContainer = createElement(
                    "div",
                    [
                        "courses-mycourses-droppeddown-link-container",
                        "splus-addedtodynamicdropdown",
                        "_3ghFm",
                    ],
                    {},
                    [
                        createElement(
                            "a",
                            ["floating-contained-link", "splus-addedtodynamicdropdown"],
                            {
                                href: "/courses",
                                textContent: "My Courses",
                            }
                        ),
                        createElement(
                            "a",
                            ["floating-contained-link", "splus-addedtodynamicdropdown"],
                            {
                                href: "/courses/mycourses/past",
                                textContent: "Past Courses",
                            }
                        ),
                    ]
                );

                candidateLink.replaceWith(newContainer);
            }
        }

        // rearrange spacing in the courses dropdown
        // Schoology has 4 tiles per row by default, we want 6

        let rowContainer: HTMLElement | null = null;
        let tiles: HTMLDivElement[] = [];

        let needsReorganization = false;

        for (let tilesRow of coursesDropdownContainer?.querySelectorAll(
            siteNavigationTileHelpers.rowSelector
        ) || []) {
            if (!rowContainer) {
                rowContainer = tilesRow.parentElement;
            }
            if (tilesRow.childElementCount != targetRowWidth) {
                needsReorganization = true;
            }
            for (let tile of tilesRow.children as HTMLCollectionOf<HTMLDivElement>) {
                if (!siteNavigationTileHelpers.isSpacerTile(tile)) {
                    tiles.push(tile);
                }
            }
        }

        // used later, clone the complete tiles list
        let contentTiles = tiles.slice(0);

        if (needsReorganization) {
            let nodeToDelete;
            while (
                (nodeToDelete = coursesDropdownContainer?.querySelector(
                    siteNavigationTileHelpers.rowSelector
                ))
            ) {
                nodeToDelete.remove();
            }

            while (tiles.length > 0) {
                rowContainer?.appendChild(
                    siteNavigationTileHelpers.createTilesRow(
                        tiles.splice(0, targetRowWidth),
                        targetRowWidth
                    )
                );
            }
        }

        let tileWidthCap;

        if (contentTiles.length > 0) {
            tileWidthCap = window.getComputedStyle(contentTiles[0]).width;
        }

        // nicknames in courses dropdown
        // these need to be handled specially because it's not displayed as one contiguous block anymore
        for (let contentTile of contentTiles) {
            let cardData = contentTile.querySelector(".Card-card-data-17m6S");
            if (
                !cardData ||
                cardData.querySelector(".splus-coursesdropdown-nicknamed-dataset") ||
                cardData.childElementCount > 1
            ) {
                // not a course, or already handled
                continue;
            }

            let courseAlias: string | undefined;
            let cardParent = cardData.parentElement as HTMLAnchorElement;
            if (cardParent.href) {
                let courseLinkMatch = cardParent.href.split("/").at(-2);
                if (courseLinkMatch) {
                    courseAlias = Setting.getNestedValue<string>("courseAliases", courseLinkMatch);
                }
            }

            if (!courseAlias) {
                continue;
            }

            // create our splus-coursesdropdown-nicknamed-dataset
            // we can't delete the old one because theming uses data from it
            (cardData.firstElementChild as HTMLElement).style.display = "none";

            // Schoology's styling: by default, card data has:
            // course name, in blue, at top: div._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB
            // section title, in black, in middle (most emphasized, I think): div._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB
            // school name, in smaller gray at bottom: div._2wOCj.xjR5v._2qcpH._17Z60._1Aph-.gs0RB

            let origCourseTitle = cardData.firstElementChild?.querySelector(
                "div._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"
            );
            let origSectionTitle = cardData.firstElementChild?.querySelector(
                "div._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"
            );
            let origSchoolTitle = cardData.firstElementChild?.querySelector(
                "div._2wOCj.xjR5v._2qcpH._17Z60._1Aph-.gs0RB"
            );

            // stylistically equivalent to the other card data, in terms of our class list for the container element
            // FIXME: there's a stylistic incongruity between a nicknamed course in the dropdown and a non-nicknamed one
            let newCardDataChild = createElement(
                "div",
                [
                    "_36sHx",
                    "_3M0N7",
                    "fjQuT",
                    "_1EyV_",
                    "splus-coursesdropdown-nicknamed-dataset",
                    "splus-addedtodynamicdropdown",
                ],
                {},
                [
                    createElement(
                        "div",
                        [
                            "_3U8Br",
                            "_1wP6w",
                            "_23_WZ",
                            "_2qcpH",
                            "_3ghFm",
                            "_17Z60",
                            "_1Aph-",
                            "gs0RB",
                        ],
                        { textContent: courseAlias }
                    ), // stylized like section title
                    createElement(
                        "div",
                        [
                            "_2wOCj",
                            "xjR5v",
                            "_2qcpH",
                            "_17Z60",
                            "_1Aph-",
                            "gs0RB",
                            "splus-coursealiasing-exempt",
                        ],
                        {
                            textContent:
                                origCourseTitle?.textContent + ": " + origSectionTitle?.textContent,
                        }
                    ), // original full title, stylized like school name
                    createElement(
                        "div",
                        ["_2wOCj", "xjR5v", "_2qcpH", "_17Z60", "_1Aph-", "gs0RB"],
                        { textContent: origSchoolTitle?.textContent }
                    ), // school title, original styling and text
                ]
            );
            if (tileWidthCap) {
                newCardDataChild.style.maxWidth = tileWidthCap;
            }
            cardData.appendChild(newCardDataChild);
        }

        // reorder courses button
        let coursesHeader = coursesDropdownContainer?.querySelector(".CjR09._8a6xl._1tpub > h2");
        if (coursesHeader && !coursesHeader.querySelector(".splus-coursesdropdown-reorder-btn")) {
            // https://www.flaticon.com/free-icon/sort_159800
            let newBtn = createElement(
                "img",
                ["splus-coursesdropdown-reorder-btn", "splus-addedtodynamicdropdown"],
                {
                    src: "https://cdn-icons-png.flaticon.com/512/690/690319.png",
                    title: "Reorder Courses",
                    alt: "Reorder Icon",
                }
            );
            newBtn.onclick = () => (location.href = "/courses?reorder");
            coursesHeader.appendChild(newBtn);
        }
    });

    for (let candidateLabel of document.querySelectorAll("#header nav ul > li button > span")) {
        if (candidateLabel.textContent == "Courses") {
            // a span inside a button inside a div (inside a li)
            coursesDropdownContainer = candidateLabel?.parentElement?.parentElement;

            // to make interaction throughout the rest of the codebase easier
            coursesDropdownContainer?.parentElement?.classList.add("splus-courses-navbar-button");
            break;
        }
    }

    if (!coursesDropdownContainer) {
        return;
    }

    coursesDropdownObserver.observe(coursesDropdownContainer, { childList: true, subtree: true });
}

function groupsDropdownModifications() {
    let groupsDropdownContainer: HTMLElement | null | undefined = null;

    let groupsDropdownObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        Logger.log("Processing groups dropdown mutation");

        // rearrange spacing in the courses dropdown
        // Schoology has 4 tiles per row by default, we want 6
        // primarily we do this to match the courses dropdown
        const targetRowWidth = 6;

        let rowContainer;
        let tiles = [];

        let needsReorganization = false;

        for (let tilesRow of groupsDropdownContainer?.querySelectorAll(
            siteNavigationTileHelpers.rowSelector
        ) || []) {
            if (!rowContainer) {
                rowContainer = tilesRow.parentElement;
            }
            if (tilesRow.childElementCount != targetRowWidth) {
                needsReorganization = true;
            }
            for (let tile of tilesRow.children as HTMLCollectionOf<HTMLDivElement>) {
                if (!siteNavigationTileHelpers.isSpacerTile(tile)) {
                    tiles.push(tile);
                }
            }
        }

        if (needsReorganization) {
            let nodeToDelete;
            while (
                (nodeToDelete = groupsDropdownContainer?.querySelector(
                    siteNavigationTileHelpers.rowSelector
                ))
            ) {
                nodeToDelete.remove();
            }

            while (tiles.length > 0) {
                rowContainer?.appendChild(
                    siteNavigationTileHelpers.createTilesRow(
                        tiles.splice(0, targetRowWidth),
                        targetRowWidth
                    )
                );
            }
        }
    });

    for (let candidateLabel of document.querySelectorAll("#header nav ul > li button > span")) {
        if (candidateLabel.textContent == "Groups") {
            // a span inside a button inside a div (inside a li)
            groupsDropdownContainer = candidateLabel?.parentElement?.parentElement;

            // to make interaction throughout the rest of the codebase easier
            groupsDropdownContainer?.parentElement?.classList?.add("splus-groups-navbar-button");
            break;
        }
    }

    if (!groupsDropdownContainer) {
        return;
    }

    groupsDropdownObserver.observe(groupsDropdownContainer, { childList: true, subtree: true });
}

function moreMenuModifications() {
    let navigationElementsContainer = document.querySelector<HTMLLIElement>(
        "#header nav > ul:nth-child(1)"
    );

    let fixNavButtons = function () {
        let moreNavElement = navigationElementsContainer?.querySelector<HTMLElement>(
            'li > button[aria-label="More"]'
        );
        let alreadyTweakedResourcesBtn = navigationElementsContainer?.querySelector<HTMLLIElement>(
            "li.splus-nav-resources-lowwidth"
        );
        let fakeGradesBtn = navigationElementsContainer?.querySelector<HTMLLIElement>(
            "li.splus-nav-grades-directlink-lowwidth"
        );
        if (moreNavElement) {
            moreNavElement = moreNavElement.parentElement;
        } else {
            // in a high width case
            // we need to determine if this is a transition or if the changes are irrelevant
            if (alreadyTweakedResourcesBtn) {
                alreadyTweakedResourcesBtn.style.display = "initial";
            }
            if (fakeGradesBtn) {
                fakeGradesBtn.style.display = "none";
            }
        }

        if (!moreNavElement || moreNavElement.classList.contains("splus-moremenu-gradesreadded")) {
            return;
        }

        moreNavElement.classList.add("splus-moremenu-gradesreadded");

        // remove the resources button - we're going to replace it with a grade report button
        let resLink = moreNavElement.previousElementSibling as HTMLElement;
        if (resLink.querySelector("a")!.href.endsWith("/resources")) {
            resLink.classList.add("splus-nav-resources-lowwidth");
            resLink.style.display = "none";

            let gradesBtn = document.createElement("li");
            gradesBtn.classList.add("_24avl");
            gradesBtn.classList.add("_3Rh90");
            gradesBtn.classList.add("splus-nav-grades-directlink-lowwidth");
            gradesBtn.innerHTML =
                '<a class="_1SIMq _2kpZl _3OAXJ _13cCs _3_bfp _2M5aC _24avl _3v0y7 _2s0LQ _3ghFm _3LeCL _31GLY _9GDcm _1D8fw util-height-six-3PHnk util-line-height-six-3lFgd util-text-decoration-none-1n0lI Header-header-button-active-state-3AvBm Header-header-button-1EE8Y sExtlink-processed" href="/grades/grades">Grades</a>';
            moreNavElement.insertAdjacentElement("beforebegin", gradesBtn);
        } else if (fakeGradesBtn) {
            if (alreadyTweakedResourcesBtn) {
                alreadyTweakedResourcesBtn.style.display = "none";
            }
            fakeGradesBtn.style.display = "initial";
        }
    };

    let navigationElementsObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        // spacing around the More... menu [reolace "Resources" with "Grades"]
        fixNavButtons();

        // the More... menu itself
        (function () {
            let moreMenuDropdownList = navigationElementsContainer?.querySelector(
                'li > div[role="menu"] > ul.util-flex-shrink-zero-3HoBE:nth-child(1)'
            );
            if (
                !moreMenuDropdownList ||
                moreMenuDropdownList.classList.contains("splus-moremenuentries-gradesprocessed")
            ) {
                return;
            }

            moreMenuDropdownList.classList.add("splus-moremenuentries-gradesprocessed");

            // remove the grades optiony menu that's under "more"
            moreMenuDropdownList
                ?.querySelector('button[data-submenu="grades"]')
                ?.parentElement?.remove();

            // first element child is the search bar
            // we want to insert directly after that
            let insertAfter = moreMenuDropdownList.firstElementChild as HTMLElement;

            let masteryLink = document.createElement("li");
            // use Schoology's convoluted class list, as presented in the original
            masteryLink.innerHTML =
                '<a aria-label="Mastery Grades" href="/mastery" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Mastery Grades</a>';

            insertAfter.insertAdjacentElement("afterend", masteryLink);

            let resourcesLink = document.createElement("li");
            resourcesLink.innerHTML =
                '<a aria-label="Resources" href="/resources" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Resources</a>';

            insertAfter.insertAdjacentElement("afterend", resourcesLink);
        })();
    });

    navigationElementsObserver.observe(navigationElementsContainer as HTMLElement, {
        childList: true,
        subtree: true,
    });

    // fix the nav buttons (for "fix" as defined above) immediately - this handles a page initially loading as low-width

    if (document.readyState === "complete" || document.readyState !== "loading") {
        fixNavButtons();
    } else {
        document.addEventListener(
            "DOMContentLoaded",
            function () {
                fixNavButtons();
            },
            false
        );
    }
}

function reorderUIElements() {
    let docObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        // make sure the reorder UI is visible; if not, don't try the expensive query
        let reorderHeader = document.querySelector(
            "header.LGaPf h1._3eD4l._3UytQ._3v0y7._16XsF._8a6xl"
        );
        if (!reorderHeader || reorderHeader.textContent != "Reorder Courses") {
            return;
        }

        // cards in the reorder UI
        let reorderUiCards = document.querySelectorAll(
            'div._1Z0RM._1tpub._2V6ED._3xHd3.L1I_b._9GENG._3LeCL._34eht._349XD.fjQuT.uQOmx._17X0S._36TKt._3qXK_._3WTX2.Mcjpm._4iu5i.jDhMt._3WDJD.CrxjQ[role="dialog"][aria-labelledby*="reorder-ui"] div._1Z0RM._3skcp._5jizS._1tpub._1SnLN._3LeCL._3lLLU._2gJbx.Card-card-2rORL'
        );

        let reprocessPictures: HTMLImageElement[] = [];

        for (let classCard of reorderUiCards) {
            let classImg = classCard.querySelector<HTMLImageElement>("img._2oHes");
            if (!classImg) {
                continue;
            }

            // div containing course, section, and school names
            let descDiv = classCard.querySelector("div._1wP6w._2s0LQ._2qcpH._1XYMV._17Z60._2oHes");

            // <COURSE NAME>: <SECTION NAME>
            let nameComponents = [];
            for (let descPart of descDiv?.querySelectorAll("div:not([class])") || []) {
                nameComponents.push(descPart.textContent);
            }

            classImg.alt = "Profile picture for " + nameComponents.join(": ");
            reprocessPictures.push(classImg);
        }

        Theme.setProfilePictures(reprocessPictures);
    });

    docObserver.observe(document.body, { childList: true, subtree: true });
}
